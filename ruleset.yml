---
name: "Default Ruleset"
enforcement_status: "evaluate" # can be "disabled", "evaluate", or "active"
bypass_actors:
  - actor_id: 1 # The ID of the actor to bypass the ruleset
    actor_type: "OrganizationAdmin" # can be "Integration", "OrganizationAdmin", "RepositoryRole", "Team", "DeployKey", or "EnterpriseTeam"
    bypass_mode: "always" # can be "always" or "pull_request"
target: "branch" # can be "branch", "tag", or "push"
conditions: #Conditions for an organization ruleset. The conditions object should contain both repository_name and ref_name properties or both repository_id and ref_name properties.
  - repository_name_and_ref_name: #Conditions to target repositories by name and refs by name
      - ref_name:
          include: ["refs/heads/main", "refs/heads/feature/*"] #Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts ~DEFAULT_BRANCH to include the default branch or ~ALL to include all branches.
          exclude: ["refs/heads/feature/experimental/*"] #Array of ref names or patterns to exclude. The conditions will not pass if any of these patterns match.
      - repository_name:
          include: ["octocat/*"] #Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts ~ALL to include all repositories.
          exclude: ["octocat/secret-*"] #Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
          protected: true # Whether renaming of target repositories is prevented.
  - repository_id_and_ref_name: #Conditions to target repositories by id and refs by name
      - ref_name:
          include: ["refs/heads/main", "refs/heads/feature/*"] #Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts ~DEFAULT_BRANCH to include the default branch or ~ALL to include all branches.
          exclude: ["refs/heads/feature/experimental/*"] #Array of ref names or patterns to exclude. The conditions will not pass if any of these patterns match.
      - repository_id:
          repository_ids: [1, 2, 3] #The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass.
  - repository_property_and_ref_name: #Conditions to target repositories by property and refs by name
      - ref_name:
          include: ["refs/heads/main", "refs/heads/feature/*"] #Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts ~DEFAULT_BRANCH to include the default branch or ~ALL to include all branches.
          exclude: ["refs/heads/feature/experimental/*"] #Array of ref names or patterns to exclude. The conditions will not pass if any of these patterns match.
      - repository_property:
          - include:
            name: "archived" #The name of the repository property to target
            property_values: ["true"] #The values to match for the repository property
            source: "custom" #The source of the repository property. Defaults to 'custom' if not specified. Can be 'custom' or 'system'.
          - exclude:
            name: "admin" #The name of the repository property to target
            property_values: ["true"] #The values to match for the repository property
            source: "custom" #The source of the repository property. Defaults to 'custom' if not specified. Can be 'custom' or 'system'.
rules: #An array of rules within the ruleset
  - creation: #Only allow users with bypass permission to create matching refs.
    type: "creation"
  - update: #Only allow users with bypass permission to update matching refs.
    type: "update"
    parameters:
      update_allows_fetch_and_merge: true #Branch can pull changes from its upstream repository
  - deletion: #Only allow users with bypass permission to delete matching refs.
    type: "deletion"
  - required_linear_history: #Prevent merge commits from being pushed to matching refs.
    type: "required_linear_history"
  - merge_queue: #Merges must be performed via a merge queue.
    type: "merge_queue"
    parameters:
      check_repsonse_timeout_minutes: 20 #Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed
      grouping_strategy: "ALLGREEN" #The strategy to use for grouping required status checks. Can be "ALLGREEN" or "HEADGREEN"
      max_entries_to_build: 10 #Limit the number of queued pull requests requesting checks and workflow runs at the same time.
      max_entries_to_merge: 10 #The maximum number of PRs that will be merged together in a group.
      merge_method: "MERGE" #Method to use when merging changes from queued pull requests. Can be one of: MERGE, SQUASH, REBASE
      min_entries_to_merge: 2 #The minimum number of PRs that will be merged together in a group.
      min_entries_to_merge_wait_minutes: 5 #The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged.
  - required_deployments: #Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
    type: "required_deployments"
    parameters:
      required_deployment_environments: ["production", "staging"] #The environments that must be successfully deployed to before branches can be merged.
  - required_signatures: #Commits pushed to matching refs must have verified signatures.
    type: "required_signatures"
  - pull_request:
    type: "pull_request"
    parameters:
      dismiss_stale_reviews_on_push: true #New, reviewable commits pushed will dismiss previous pull request review approvals.
      require_code_owner_review: true #Require an approving review in pull requests that modify files that have a designated code owner.
      require_last_psuh_approval: true #Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
      require_approving_review_count: 1 #The number of approving reviews required before a pull request can be merged.
      required_review_thread_resolution: true #All conversations on code must be resolved before a pull request can be merged.
  - required_status_checks: #Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.
    type: "required_status_checks"
    parameters:
      do_not_enforce_on_create: true #Allow repositories and branches to be created if a check would otherwise prohibit it.
      required_status_checks:
        - context: "ci/circleci: build" #The status check context name that must be present on the commit.
          integration_id: 1 #The optional integration ID that this status check must originate from.
      strict_required_status_checks_policy: true #Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled.
  - non_fast_forward: #Prevent users with push access from force pushing to refs.
    type: "non_fast_forward"
  - commit_message_pattern: #Choose which commit message patterns must be present before the ref is updated.
    type: "commit_message_pattern"
    parameters:
      name: "commit_message_pattern" #The name of the commit message pattern.
      negate: false #If true, the rule will fail if the pattern matches.
      operator: "starts_with" #The operator to use when comparing the commit message pattern. Can be "starts_with", "ends_with", "contains", or "regex".
      pattern: "fixup!" #The pattern to match against the commit message.
  - commit_author_email_pattern: #Choose which commit author email patterns must be present before the ref is updated.
    type: "commit_author_email_pattern"
    parameters:
      name: "commit_author_email_pattern" #The name of the commit author email pattern.
      negate: false #If true, the rule will fail if the pattern matches.
      operator: "starts_with" #The operator to use when comparing the commit author email pattern. Can be "starts_with", "ends_with", "contains", or "regex".
      pattern: "octocat.com" #The pattern to match against the commit author email.
  - commiter_email_pattern: #Choose which commiter email patterns must be present before the ref is updated.
    type: "commiter_email_pattern"
    parameters:
      name: "commiter_email_pattern" #The name of the commiter email pattern.
      negate: false #If true, the rule will fail if the pattern matches.
      operator: "starts_with" #The operator to use when comparing the commiter email pattern. Can be "starts_with", "ends_with", "contains", or "regex".
      pattern: "octocat.com" #The pattern to match against the commiter email.
  - branch_name_pattern: #Choose which branch name patterns must be present before the ref is updated.
    type: "branch_name_pattern"
    parameters:
      name: "branch_name_pattern" #The name of the branch name pattern.
      negate: false #If true, the rule will fail if the pattern matches.
      operator: "starts_with" #The operator to use when comparing the branch name pattern. Can be "starts_with", "ends_with", "contains", or "regex".
      pattern: "feature/" #The pattern to match against the branch name.
  - tag_name_pattern: #Choose which tag name patterns must be present before the ref is updated.
    type: "tag_name_pattern"
    parameters:
      name: "tag_name_pattern" #The name of the tag name pattern.
      negate: false #If true, the rule will fail if the pattern matches.
      operator: "starts_with" #The operator to use when comparing the tag name pattern. Can be "starts_with", "ends_with", "contains", or "regex".
      pattern: "v" #The pattern to match against the tag name.
  - file_path_restriction: #Prevent commits that include changes in specified file paths from being pushed to the commit graph.
    type: "file_path_restriction"
    parameters:
      restricted_file_paths: ["*.js", "*.ts"] #The file paths that are restricted from being pushed to the commit graph.
  - max_file_path_length: #Prevent commits that include changes in files with paths longer than the specified length from being pushed to the commit graph.
    type: "max_file_path_length"
    parameters:
      max_file_path_length: 100 #The maximum file path length that is allowed to be pushed to the commit graph.
  - file_extension_restriction: #Prevent commits that include changes in files with specified file extensions from being pushed to the commit graph.
    type: "file_extension_restriction"
    parameters:
      restricted_file_extensions: ["js", "ts"] #The file extensions that are restricted from being pushed to the commit graph.
  - max_file_size: #Prevent commits that include changes in files larger than the specified size from being pushed to the commit graph.
    type: "max_file_size"
    parameters:
      max_file_size: 100 #The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS).
  - workflows: #Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
    type: "workflows"
    parameters:
      do_not_enforce_on_create: true #Allow repositories and branches to be created if a check would otherwise prohibit it.
      workflows:
        - path: ".github/workflows/main.yml" #The path to the workflow file.
          ref: "main" #The ref (branch or tag) of the workflow file to use
          repository_id: 1 #The ID of the repository where the workflow is defined
          sha: "123456" #The commit SHA of the workflow file to use
  - code_scanning: #Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.
    type: "code_scanning"
    parameters:
      code_scanning_tools:
        - alerts_threshold: "none" #The severity level at which code scanning results that raise alerts block a reference update. Can be one of "none", "critical", "high_or_higher", "medium_or_higher", or "all".
          security_alerts_threshold: "none" #The severity level at which code scanning results that raise security alerts block a reference update. Can be one of "none", "critical", "high_or_higher", "medium_or_higher", or "all".
          tool: "CodeQL" #The name of the code scanning tool.