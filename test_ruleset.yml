---
name: "Default Ruleset"
enforcement_status: "evaluate" # can be "disabled", "evaluate", or "active"

bypass_actors:
  - actor_id: 1 #The ID of the actor that can bypass a ruleset. If actor_type is OrganizationAdmin, this should be 1. If actor_type is DeployKey, this should be null. OrganizationAdmin is not applicable for personal repositories.
    actor_type: "OrganizationAdmin" # can be "Integration", "OrganizationAdmin", "RepositoryRole", "Team", "DeployKey", or "EnterpriseTeam"
    bypass_mode: "always" # can be "always" or "pull_request"

target: "branch" # can be "branch", "tag", or "push"

conditions: # Conditions for an organization ruleset
  - repository_name_and_ref_name: # Conditions to target repositories by name and refs by name
      - ref_name:
          include: 
            - "refs/heads/main"
            - "refs/heads/feature/*" # Array of ref names or patterns to include
          exclude: 
            - "refs/heads/feature/experimental/*" # Array of ref names or patterns to exclude
      - repository_name:
          include: 
            - "octocat/*" # Array of repository names or patterns to include
          exclude: 
            - "octocat/secret-*" # Array of repository names or patterns to exclude
          protected: true # Whether renaming of target repositories is prevented

  - repository_id_and_ref_name: # Conditions to target repositories by id and refs by name
      - ref_name:
          include: 
            - "refs/heads/main"
            - "refs/heads/feature/*" # Array of ref names or patterns to include
          exclude: 
            - "refs/heads/feature/experimental/*" # Array of ref names or patterns to exclude
      - repository_id:
          repository_ids: 
            - 1
            - 2
            - 3 # The repository IDs that the ruleset applies to

  - repository_property_and_ref_name: # Conditions to target repositories by property and refs by name
      - ref_name:
          include: 
            - "refs/heads/main"
            - "refs/heads/feature/*" # Array of ref names or patterns to include
          exclude: 
            - "refs/heads/feature/experimental/*" # Array of ref names or patterns to exclude
      - repository_property:
          - include:
              name: "archived" # The name of the repository property to target
              property_values: 
                - "true" # The values to match for the repository property
              source: "custom" # The source of the repository property
          - exclude:
              name: "admin" # The name of the repository property to target
              property_values: 
                - "true" # The values to match for the repository property
              source: "custom" # The source of the repository property

rules: # An array of rules within the ruleset
  - type: "creation" # Only allow users with bypass permission to create matching refs
  - type: "update" # Only allow users with bypass permission to update matching refs
    parameters:
      update_allows_fetch_and_merge: true # Branch can pull changes from its upstream repository
  - type: "deletion" # Only allow users with bypass permission to delete matching refs
  - type: "required_linear_history" # Prevent merge commits from being pushed to matching refs
  - type: "merge_queue" # Merges must be performed via a merge queue
    parameters:
      check_response_timeout_minutes: 20 # Maximum time for a required status check to report a conclusion
      grouping_strategy: "ALLGREEN" # Strategy for grouping required status checks
      max_entries_to_build: 10 # Limit the number of queued pull requests requesting checks and workflow runs at the same time
      max_entries_to_merge: 10 # Maximum number of PRs that will be merged together in a group
      merge_method: "MERGE" # Method to use when merging changes from queued pull requests
      min_entries_to_merge: 2 # Minimum number of PRs that will be merged together in a group
      min_entries_to_merge_wait_minutes: 5 # Time merge queue should wait after the first PR is added to the queue
  - type: "required_deployments" # Choose which environments must be successfully deployed to before refs can be pushed
    parameters:
      required_deployment_environments: 
        - "production"
        - "staging" # Environments that must be successfully deployed to before branches can be merged
  - type: "required_signatures" # Commits pushed to matching refs must have verified signatures
  - type: "pull_request"
    parameters:
      dismiss_stale_reviews_on_push: true # New, reviewable commits pushed will dismiss previous pull request review approvals
      require_code_owner_review: true # Require an approving review in pull requests that modify files that have a designated code owner
      require_last_push_approval: true # Whether the most recent reviewable push must be approved by someone other than the person who pushed it
      require_approving_review_count: 1 # Number of approving reviews required before a pull request can be merged
      required_review_thread_resolution: true # All conversations on code must be resolved before a pull request can be merged
  - type: "required_status_checks" # Choose which status checks must pass before the ref is updated
    parameters:
      do_not_enforce_on_create: true # Allow repositories and branches to be created if a check would otherwise prohibit it
      required_status_checks:
        - context: "ci/circleci: build" # Status check context name that must be present on the commit
          integration_id: 1 # Optional integration ID that this status check must originate from
      strict_required_status_checks_policy: true # Whether pull requests targeting a matching branch must be tested with the latest code
  - type: "non_fast_forward" # Prevent users with push access from force pushing to refs
  - type: "commit_message_pattern" # Choose which commit message patterns must be present before the ref is updated
    parameters:
      name: "commit_message_pattern" # Name of the commit message pattern
      negate: false # If true, the rule will fail if the pattern matches
      operator: "starts_with" # Operator to use when comparing the commit message pattern
      pattern: "fixup!" # Pattern to match against the commit message
  - type: "commit_author_email_pattern" # Choose which commit author email patterns must be present before the ref is updated
    parameters:
      name: "commit_author_email_pattern" # Name of the commit author email pattern
      negate: false # If true, the rule will fail if the pattern matches
      operator: "starts_with" # Operator to use when comparing the commit author email pattern
      pattern: "octocat.com" # Pattern to match against the commit author email
  - type: "committer_email_pattern" # Choose which committer email patterns must be present before the ref is updated
    parameters:
      name: "committer_email_pattern" # Name of the committer email pattern
      negate: false # If true, the rule will fail if the pattern matches
      operator: "starts_with" # Operator to use when comparing the committer email pattern
      pattern: "octocat.com" # Pattern to match against the committer email
  - type: "branch_name_pattern" # Choose which branch name patterns must be present before the ref is updated
    parameters:
      name: "branch_name_pattern" # Name of the branch name pattern
      negate: false # If true, the rule will fail if the pattern matches
      operator: "starts_with" # Operator to use when comparing the branch name pattern
      pattern: "feature/" # Pattern to match against the branch name
  - type: "tag_name_pattern" # Choose which tag name patterns must be present before the ref is updated
    parameters:
      name: "tag_name_pattern" # Name of the tag name pattern
      negate: false # If true, the rule will fail if the pattern matches
      operator: "starts_with" # Operator to use when comparing the tag name pattern
      pattern: "v" # Pattern to match against the tag name
  - type: "file_path_restriction" # Prevent commits that include changes in specified file paths from being pushed
    parameters:
      restricted_file_paths: 
        - "*.js"
        - "*.ts" # File paths that are restricted from being pushed
  - type: "max_file_path_length" # Prevent commits that include changes in files with paths longer than the specified length
    parameters:
      max_file_path_length: 100 # Maximum file path length that is allowed to be pushed
  - type: "file_extension_restriction" # Prevent commits that include changes in files with specified file extensions from being pushed
    parameters:
      restricted_file_extensions: 
        - "js"
        - "ts" # File extensions that are restricted from being pushed
  - type: "max_file_size" # Prevent commits that include changes in files larger than the specified size from being pushed
    parameters:
      max_file_size: 100 # Maximum file size allowed in megabytes
  - type: "workflows" # Require all changes made to a targeted branch to pass the specified workflows before they can be merged
    parameters:
      do_not_enforce_on_create: true # Allow repositories and branches to be created if a check would otherwise prohibit it
      workflows:
        - path: ".github/workflows/main.yml" # Path to the workflow file
          ref: "main" # Ref (branch or tag) of the workflow file to use
          repository_id: 1 # ID of the repository where the workflow is defined
          sha: "123456" # Commit SHA of the workflow file to use
  - type: "code_scanning" # Choose which tools must provide code scanning results before the reference is updated
    parameters:
      code_scanning_tools:
        - tool: "CodeQL" # Name of the code scanning tool
          alerts_threshold: "none" # Severity level at which code scanning results that raise alerts block a reference update
          security_alerts_threshold: "none" # Severity level at which code scanning results that raise security alerts block a reference update